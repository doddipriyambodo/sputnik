AWSTemplateFormatVersion: '2010-09-09'
Description: 'sputnik - Micro Service Lambda - Systems - Version %%VERSION%%'
Parameters:
    sourceBucket:
        Type: String
        Description: S3 Bucket for Lambda code.
    lambdaSourceKeyPrefix:
        Type: String
        Description: S3 Bucket Key prefix for Lambda code.
    settingsTable:
        Type: String
        Description: DynamoDB Table for storing the application settings
    devicesTable:
        Type: String
        Description: DynamoDB Table for storing the devices
    deviceBlueprintsTable:
        Type: String
        Description: DynamoDB Table for storing the device blueprints
    deviceTypesTable:
        Type: String
        Description: DynamoDB Table for storing the device types
    systemsTable:
        Type: String
        Description: DynamoDB Table for storing the systems
    systemBlueprintsTable:
        Type: String
        Description: DynamoDB Table for storing the system blueprints

Resources:

    lambdaServiceSystemsRole:
        Type: 'AWS::IAM::Role'
        Properties:
            AssumeRolePolicyDocument:
                Version: '2012-10-17'
                Statement:
                    -
                        Effect: 'Allow'
                        Principal:
                            Service:
                                - 'lambda.amazonaws.com'
                        Action:
                                - 'sts:AssumeRole'
            Path: '/'

    lambdaServiceSystemsPolicy:
        Type: 'AWS::IAM::ManagedPolicy'
        Properties:
            Description: 'sputnik policy for the systems microservice Lambda function.'
            PolicyDocument:
                Version: '2012-10-17'
                Statement:
                    -
                        Effect: 'Allow'
                        Action:
                            - 'logs:CreateLogGroup'
                            - 'logs:CreateLogStream'
                            - 'logs:PutLogEvents'
                        Resource: !Join ['', ['arn:aws:logs:', !Ref 'AWS::Region', ':', !Ref 'AWS::AccountId', ':log-group:/aws/lambda/', !Ref lambdaServiceSystems, ':*']]
                    -
                        Effect: 'Allow'
                        Action:
                            - 'dynamodb:BatchGetItem'
                            - 'dynamodb:BatchWriteItem'
                            - 'dynamodb:DeleteItem'
                            - 'dynamodb:GetItem'
                            - 'dynamodb:PutItem'
                            - 'dynamodb:Query'
                            - 'dynamodb:Scan'
                            - 'dynamodb:UpdateItem'
                        Resource:
                            - !Join ['', ['arn:aws:dynamodb:', !Ref 'AWS::Region', ':', !Ref 'AWS::AccountId', ':table/', !Ref devicesTable]]
                            - !Join ['', ['arn:aws:dynamodb:', !Ref 'AWS::Region', ':', !Ref 'AWS::AccountId', ':table/', !Ref deviceBlueprintsTable]]
                            - !Join ['', ['arn:aws:dynamodb:', !Ref 'AWS::Region', ':', !Ref 'AWS::AccountId', ':table/', !Ref deviceTypesTable]]
                            - !Join ['', ['arn:aws:dynamodb:', !Ref 'AWS::Region', ':', !Ref 'AWS::AccountId', ':table/', !Ref settingsTable]]
                            - !Join ['', ['arn:aws:dynamodb:', !Ref 'AWS::Region', ':', !Ref 'AWS::AccountId', ':table/', !Ref systemsTable]]
                            - !Join ['', ['arn:aws:dynamodb:', !Ref 'AWS::Region', ':', !Ref 'AWS::AccountId', ':table/', !Ref systemBlueprintsTable]]
                    -
                        Effect: 'Allow'
                        Action:
                            # TODO: Too permissive for now.
                            - 'iot:*'
                            - 'greengrass:*'
                        Resource:
                            - '*'
            Roles:
                - !Ref 'lambdaServiceSystemsRole'

    lambdaServiceSystems:
        Type: 'AWS::Lambda::Function'
        Properties:
            FunctionName: 'sputnik-systems-service'
            Description: 'sputnik systems microservice'
            Code:
                S3Bucket: !Ref sourceBucket
                S3Key: !Join ['/', [!Ref lambdaSourceKeyPrefix, 'sputnik-systems-service.zip']]
            Handler: index.handler
            Runtime: nodejs8.10
            Role: !GetAtt lambdaServiceSystemsRole.Arn
            Timeout: 60
            MemorySize: 256
            Environment:
                Variables:
                    TABLE_DEVICES: !Ref devicesTable
                    TABLE_DEVICE_BLUEPRINTS: !Ref deviceBlueprintsTable
                    TABLE_DEVICE_TYPES: !Ref deviceTypesTable
                    TABLE_SYSTEMS: !Ref systemsTable
                    TABLE_SYSTEM_BLUEPRINTS: !Ref systemBlueprintsTable
                    TABLE_SETTINGS: !Ref settingsTable
                    LOGGING_LEVEL: 2


Outputs:
    lambdaServiceSystemsArn:
        Description: 'Systems Service ARN'
        Value: !GetAtt lambdaServiceSystems.Arn
