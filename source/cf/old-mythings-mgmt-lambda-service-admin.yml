AWSTemplateFormatVersion: '2010-09-09'
Description: 'My Things Management - Micro Service Lambda - Admin - Version %%VERSION%%'
Parameters:
    sourceBucket:
        Type: String
        Description: S3 Bucket for Lambda code.
    sourceKeyPrefix:
        Type: String
        Description: S3 Bucket Key prefix for Lambda code.
    settingsTable:
        Type: String
        Description: DynamoDB Table for storing the application settings
    userPoolId:
        Type: String
        Description: My Things Management Cognito User Pool Id
Resources:
    adminServiceRole:
        Type: 'AWS::IAM::Role'
        Properties:
            AssumeRolePolicyDocument:
                Version: '2012-10-17'
                Statement:
                    -
                        Effect: 'Allow'
                        Principal:
                            Service:
                                - 'lambda.amazonaws.com'
                        Action:
                                - 'sts:AssumeRole'
            Path: '/'

    adminServicePolicy:
        Type: 'AWS::IAM::ManagedPolicy'
        Properties:
            Description: 'My Things Management policy for the admin microservice Lambda function.'
            PolicyDocument:
                Version: '2012-10-17'
                Statement:
                    -
                        Effect: 'Allow'
                        Action:
                            - 'logs:CreateLogGroup'
                            - 'logs:CreateLogStream'
                            - 'logs:PutLogEvents'
                        Resource:
                            !Join ['', ['arn:aws:logs:', !Ref 'AWS::Region', ':', !Ref 'AWS::AccountId', ':log-group:/aws/lambda/', !Ref adminService, ':*']]
                    -
                        Effect: 'Allow'
                        Action:
                            - 'dynamodb:BatchGetItem'
                            - 'dynamodb:BatchWriteItem'
                            - 'dynamodb:DeleteItem'
                            - 'dynamodb:GetItem'
                            - 'dynamodb:PutItem'
                            - 'dynamodb:Query'
                            - 'dynamodb:Scan'
                            - 'dynamodb:UpdateItem'
                        Resource:
                            - !Join ['', ['arn:aws:dynamodb:', !Ref 'AWS::Region', ':', !Ref 'AWS::AccountId', ':table/', !Ref settingsTable]]
                    -
                        Effect: 'Allow'
                        Action:
                            - 'cognito-idp:AdminGetUser'
                            - 'cognito-idp:AdminListGroupsForUser'
                            - 'cognito-idp:AdminEnableUser'
                            - 'cognito-idp:AdminDisableUser'
                            - 'cognito-idp:AdminCreateUser'
                            - 'cognito-idp:AdminDeleteUser'
                            - 'cognito-idp:AdminAddUserToGroup'
                            - 'cognito-idp:ListUsers'
                            - 'cognito-idp:ListGroups'
                            - 'cognito-idp:GetGroup'
                            - 'cognito-idp:ListUsersInGroup'
                        Resource:
                            !Join ['', ['arn:aws:cognito-idp:', !Ref 'AWS::Region', ':', !Ref 'AWS::AccountId', ':userpool/', !Ref userPoolId]]

            Roles:
                - !Ref 'adminServiceRole'


    adminService:
        Type: "AWS::Lambda::Function"
        Properties:
            FunctionName: "mythings-mgmt-admin-service"
            Description: "My Things Management administration microservice"
            Code:
                S3Bucket: !Ref sourceBucket
                S3Key: !Join ["/", [!Ref sourceKeyPrefix, "mythings-mgmt-admin-service.zip"]]
            Handler: index.handler
            Runtime: nodejs8.10
            Role: !GetAtt adminServiceRole.Arn
            Timeout: 60
            MemorySize: 256
            Environment:
                Variables:
                    SETTINGS_TBL: !Ref settingsTable
                    LOGGING_LEVEL: 2


Outputs:
    adminServiceArn:
        Description: 'Admin Service ARN'
        Value: !GetAtt adminService.Arn
