{"version":3,"sources":["ng://aws-iot/lib/aws-iot.service.ts","ng://aws-iot/lib/aws-iot.component.ts","ng://aws-iot/lib/aws-iot.module.ts"],"names":["attachPrincipalPolicy","templateObject_1","tslib_1","__makeTemplateObject","getThingShadow","gql","templateObject_2","updateThingShadow","templateObject_3","AWSIoTService","amplifyService","this","Subject","connectionSubject","asObservable","prototype","connect","_this","auth","currentCredentials","then","credentials","api","graphql","query","loc","source","body","variables","policyName","appVariables","IOT_COGNITO_POLICY","principal","identityId","result","data","Amplify","addPluggable","AWSIoTProvider","aws_pubsub_region","REGION","aws_pubsub_endpoint","IOT_ENDPOINT","console","log","isConnected","next","catch","err","error","subscribe","topic","onMessage","onError","pubsub","params","JSON","stringify","parse","payload","Injectable","AmplifyService","IoTSubscription","AWSIoTComponent","_iotService","Subscription","ngOnDestroy","subscriptions","unsubscribe","iotSubscriptions","connectionObservable$","connected","setSubscriptions","forEach","sub","add","updateIncomingShadow","incoming","shadowField","hasOwnProperty","state","reported","_","extend","desired","getLastState","thingName","updateDesiredShadow","desiredState","Component","args","selector","template","AWSIoTModule","NgModule","declarations","exports","imports","AmplifyAngularModule","CommonModule","providers"],"mappings":"ouBAYA,UAAMA,oDAA2BC,IAAAA,EAAAC,EAAAC,qBAAA,CAAA,6KAAA,CAAA,gLAK3BC,EAAiBC,EAAGC,IAAAA,EAAAJ,EAAAC,qBAAA,CAAA,uIAAA,CAAA,0IAOpBI,EAAoBF,EAAGG,IAAAA,EAAAN,EAAAC,qBAAA,CAAA,gJAAA,CAAA,gKAsBzB,SAAAM,EAAoBC,GAAAC,KAAAD,eAAAA,yBAJa,IAAIE,EAAAA,mCACND,KAAKE,kBAAkBC,iCACjC,SAIrBL,EAAAM,UAAAC,QAAA,WAAA,IAAAC,EAAAN,KACIA,KAAKD,eACAQ,OACAC,qBACAC,KAAK,SAAAC,GAUF,OARqBJ,EAAKP,eAAeY,MAAMC,QAAQ,CACnDC,MAAOxB,EAAsByB,IAAIC,OAAOC,KACxCC,UAAW,CACPC,WAAYC,aAAaC,mBACzBC,UAAWX,EAAYY,cAIhBb,KAAK,SAAAc,GAUhB,OARe,KADfA,EAASA,EAAOC,KAAKnC,wBAEjBoC,EAAQC,aACJ,IAAIC,EAAAA,eAAe,CACfC,kBAAmBT,aAAaU,OAChCC,oBAAqB,SAAWX,aAAaY,aAAe,WAIjER,MAGdd,KAAK,SAAAc,GACFS,QAAQC,IAAI,uBAAwBV,GACpCjB,EAAK4B,aAAc,EACnB5B,EAAKJ,kBAAkBiC,KAAK7B,EAAK4B,eAEpCE,SAAM,SAAAC,GACHL,QAAQM,MAAM,4CAA6CD,GAC3D/B,EAAK4B,aAAc,EACnB5B,EAAKJ,kBAAkBiC,KAAK7B,EAAK4B,gBAI7CpC,EAAAM,UAAAmC,UAAA,SAAUC,EAAeC,EAAWC,GAChC,OAAO1C,KAAKD,eACP4C,SACAJ,UAAUC,GACVD,UACG,SAAAf,GAAQ,OAAAiB,EAAUjB,IAClB,SAAAc,GAAS,OAAAI,EAAQJ,IACjB,WACIN,QAAQC,IAAI,kBAAmBO,EAAO,YAKtD1C,EAAAM,UAAAX,eAAA,SAAemD,GAOX,OANqB5C,KAAKD,eAAeY,MAAMC,QAAQ,CACnDC,MAAOpB,EAAeqB,IAAIC,OAAOC,KACjCC,UAAW,CACP2B,OAAQC,KAAKC,UAAUF,MAGhBnC,KAAK,SAAAc,GAAU,OAAAsB,KAAKE,MAAMxB,EAAOC,KAAK/B,eAAeuD,YAGxElD,EAAAM,UAAAR,kBAAA,SAAkBgD,GAQd,OAPqB5C,KAAKD,eAAeY,MAAMC,QAAQ,CACnDC,MAAOjB,EAAkBkB,IAAIC,OAAOC,KACpCC,UAAW,CACP2B,OAAQC,KAAKC,UAAUF,MAIhBnC,KAAK,SAAAc,GAAU,OAAAsB,KAAKE,MAAMxB,EAAOC,KAAK5B,kBAAkBoD,gCAnF9EC,EAAAA,sDA9BQC,EAAAA,uBCGTC,iBAAAC,EAAA,WAiBI,SAAAA,EAAoBC,GAAArD,KAAAqD,YAAAA,qBANkB,IAAIC,EAAAA,0BAGpB,iBACC,UAIvBF,EAAAhD,UAAAmD,YAAA,WACIvB,QAAQC,IAAI,2BACZjC,KAAKwD,cAAcC,eAGbL,EAAAhD,UAAAmC,UAAV,SAAoBmB,GAApB,IAAApD,EAAAN,KACIA,KAAK0D,iBAAmBA,EACxB1D,KAAKqD,YAAYM,sBAAsBpB,UAAU,SAACqB,GAC9C5B,QAAQC,IAAI,oDAAqD2B,GACjEtD,EAAKuD,qBAET7D,KAAK6D,oBAGDT,EAAAhD,UAAAyD,uCACA7D,KAAKqD,YAAYnB,YACjBlC,KAAK0D,iBAAiBI,QAAQ,SAACC,GAC3B/B,QAAQC,IAAI,wBAAyB8B,EAAIvB,OACzClC,EAAKkD,cAAcQ,IAAI1D,EAAK+C,YAAYd,UAAUwB,EAAIvB,MAAOuB,EAAItB,UAAWsB,EAAIrB,YAGpFV,QAAQC,IAAI,6CAGVmB,EAAAhD,UAAA6D,qBAAV,SAA+BC,EAAUC,QAAA,IAAAA,IAAAA,EAAA,MACjCD,EAASE,eAAe,UAAYF,EAASG,MAAMD,eAAe,cAC9C,OAAhBD,GAAwBD,EAASG,MAAMC,SAASF,eAAeD,GAC/DI,EAAAA,EAAEC,OAAOxE,KAAKsE,SAAUJ,EAASG,MAAMC,SAASH,IAGhDI,EAAAA,EAAEC,OAAOxE,KAAKsE,SAAUJ,EAASG,MAAMC,WAI3CJ,EAASE,eAAe,UAAYF,EAASG,MAAMD,eAAe,aAC9C,OAAhBD,GAAwBD,EAASG,MAAMI,QAAQL,eAAeD,GAC9DI,EAAAA,EAAEC,OAAOxE,KAAKyE,QAASP,EAASG,MAAMI,QAAQN,IAG9CI,EAAAA,EAAEC,OAAOxE,KAAKyE,QAASP,EAASG,MAAMI,WAMxCrB,EAAAhD,UAAAsE,aAAV,SAAuBC,EAAWR,GAAlC,IAAA7D,EAAAN,KACI,YAD8B,IAAAmE,IAAAA,EAAA,MACvBnE,KAAKqD,YACP5D,eAAe,CACZkF,UAAWA,IAEdlE,KAAK,SAAAc,GAEF,OADAjB,EAAK2D,qBAAqB1C,EAAQ4C,GAC3B5C,IAEVa,SAAM,SAAAC,GAEH,MADAL,QAAQM,MAAMD,GACRA,KAIRe,EAAAhD,UAAAwE,oBAAV,SAA8BD,EAAWE,GACrC,OAAO7E,KAAKqD,YAAYzD,kBAAkB,CACtC+E,UAAWA,EACX3B,QAASH,KAAKC,UAAU,CACpBuB,MAAO,CACHI,QAASI,4BA9E5BC,EAAAA,UAASC,KAAA,CAAC,CACPC,SAAU,oBACVC,SAAU,gDAZLnF,OAIT,GCPAoF,EAAA,oDAUCC,EAAAA,SAAQJ,KAAA,CAAC,CACNK,aAAc,CAAChC,GACfiC,QAAS,CAACjC,GACVkC,QAAS,CAACC,EAAAA,qBAAsBC,EAAAA,cAChCC,UAAW,CAAC3F,SAdhB","sourcesContent":["// Angular\nimport { Injectable } from '@angular/core';\nimport { Subject } from 'rxjs';\n\n// AWS\nimport { AmplifyService } from 'aws-amplify-angular';\nimport Amplify from 'aws-amplify';\nimport { AWSIoTProvider } from '@aws-amplify/pubsub/lib/Providers';\n\n// -----\nimport gql from 'graphql-tag';\n\nconst attachPrincipalPolicy = gql`\n    mutation AttachPrincipalPolicy($policyName: String!, $principal: String!) {\n        attachPrincipalPolicy(policyName: $policyName, principal: $principal)\n    }\n`;\nconst getThingShadow = gql`\n    query GetThingShadow($params: AWSJSON!) {\n        getThingShadow(params: $params) {\n            payload\n        }\n    }\n`;\nconst updateThingShadow = gql`\n    mutation UpdateThingShadow($params: AWSJSON!) {\n        updateThingShadow(params: $params) {\n            payload\n        }\n    }\n`;\n\ndeclare var appVariables: any;\n\n\n@Injectable(\n// {\n//     providedIn: 'root'\n// }\n)\nexport class AWSIoTService {\n\n    private connectionSubject: any = new Subject<boolean>();\n    public connectionObservable$ = this.connectionSubject.asObservable();\n    public isConnected = false;\n\n    constructor(private amplifyService: AmplifyService) { }\n\n    connect() {\n        this.amplifyService\n            .auth()\n            .currentCredentials()\n            .then(credentials => {\n\n                const promise: any = this.amplifyService.api().graphql({\n                    query: attachPrincipalPolicy.loc.source.body,\n                    variables: {\n                        policyName: appVariables.IOT_COGNITO_POLICY,\n                        principal: credentials.identityId\n                    }\n                });\n\n                return promise.then(result => {\n                    result = result.data.attachPrincipalPolicy;\n                    if (result === true) {\n                        Amplify.addPluggable(\n                            new AWSIoTProvider({\n                                aws_pubsub_region: appVariables.REGION,\n                                aws_pubsub_endpoint: 'wss://' + appVariables.IOT_ENDPOINT + '/mqtt'\n                            })\n                        );\n                    }\n                    return result;\n                });\n            })\n            .then(result => {\n                console.log('Connected to AWS IoT', result);\n                this.isConnected = true;\n                this.connectionSubject.next(this.isConnected);\n            })\n            .catch(err => {\n                console.error('Error while trying to connect to AWS IoT:', err);\n                this.isConnected = false;\n                this.connectionSubject.next(this.isConnected);\n            });\n    }\n\n    subscribe(topic: string, onMessage, onError) {\n        return this.amplifyService\n            .pubsub()\n            .subscribe(topic)\n            .subscribe(\n                data => onMessage(data),\n                error => onError(error),\n                () => {\n                    console.log('Subscription to', topic, 'done.');\n                }\n            );\n    }\n\n    getThingShadow(params: any) {\n        const promise: any = this.amplifyService.api().graphql({\n            query: getThingShadow.loc.source.body,\n            variables: {\n                params: JSON.stringify(params)\n            }\n        });\n        return promise.then(result => JSON.parse(result.data.getThingShadow.payload));\n    }\n\n    updateThingShadow(params: any) {\n        const promise: any = this.amplifyService.api().graphql({\n            query: updateThingShadow.loc.source.body,\n            variables: {\n                params: JSON.stringify(params)\n            }\n        });\n\n        return promise.then(result => JSON.parse(result.data.updateThingShadow.payload));\n    }\n}\n","import { Component, OnDestroy } from '@angular/core';\nimport { Subscription } from 'rxjs';\n\n// Services\nimport { AWSIoTService } from './aws-iot.service';\n\nimport { _ } from 'underscore';\n\nexport class IoTSubscription {\n    topic: string;\n    onMessage: (data: any) => void;\n    onError: (data: any) => void;\n}\n\n@Component({\n    selector: 'aws-iot-component',\n    template: ''\n})\nexport class AWSIoTComponent implements OnDestroy {\n    private subscriptions: Subscription = new Subscription();\n    private iotSubscriptions: IoTSubscription[];\n\n    public desired: any = {};\n    public reported: any = {};\n\n    constructor(private _iotService: AWSIoTService) {}\n\n    ngOnDestroy() {\n        console.log('Unsubscribing to topics');\n        this.subscriptions.unsubscribe();\n    }\n\n    protected subscribe(iotSubscriptions: IoTSubscription[]) {\n        this.iotSubscriptions = iotSubscriptions;\n        this._iotService.connectionObservable$.subscribe((connected: boolean) => {\n            console.log('Change of connection state: setting subscriptions', connected);\n            this.setSubscriptions();\n        });\n        this.setSubscriptions();\n    }\n\n    private setSubscriptions() {\n        if (this._iotService.isConnected) {\n            this.iotSubscriptions.forEach((sub: IoTSubscription) => {\n                console.log('Subscribing to topic:', sub.topic);\n                this.subscriptions.add(this._iotService.subscribe(sub.topic, sub.onMessage, sub.onError));\n            });\n        } else {\n            console.log('Not connected to AWS IoT: Cant subscribe');\n        }\n    }\n    protected updateIncomingShadow(incoming, shadowField = null) {\n        if (incoming.hasOwnProperty('state') && incoming.state.hasOwnProperty('reported')) {\n            if (shadowField !== null && incoming.state.reported.hasOwnProperty(shadowField)) {\n                _.extend(this.reported, incoming.state.reported[shadowField]);\n                // this.reported = incoming.state.reported[shadowField];\n            } else {\n                _.extend(this.reported, incoming.state.reported);\n                // this.reported = incoming.state.reported;\n            }\n        }\n        if (incoming.hasOwnProperty('state') && incoming.state.hasOwnProperty('desired')) {\n            if (shadowField !== null && incoming.state.desired.hasOwnProperty(shadowField)) {\n                _.extend(this.desired, incoming.state.desired[shadowField]);\n                // this.desired = incoming.state.desired[shadowField];\n            } else {\n                _.extend(this.desired, incoming.state.desired);\n                // this.desired = incoming.state.desired;\n            }\n        }\n    }\n\n    protected getLastState(thingName, shadowField = null) {\n        return this._iotService\n            .getThingShadow({\n                thingName: thingName\n            })\n            .then(result => {\n                this.updateIncomingShadow(result, shadowField);\n                return result;\n            })\n            .catch(err => {\n                console.error(err);\n                throw err;\n            });\n    }\n\n    protected updateDesiredShadow(thingName, desiredState) {\n        return this._iotService.updateThingShadow({\n            thingName: thingName,\n            payload: JSON.stringify({\n                state: {\n                    desired: desiredState\n                }\n            })\n        });\n    }\n}\n","// Angular\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n// AWS Specific\nimport { AmplifyAngularModule } from 'aws-amplify-angular';\n\n// --------\nimport { AWSIoTComponent } from './aws-iot.component';\nimport { AWSIoTService } from './aws-iot.service';\n\n@NgModule({\n    declarations: [AWSIoTComponent],\n    exports: [AWSIoTComponent],\n    imports: [AmplifyAngularModule, CommonModule],\n    providers: [AWSIoTService]\n})\nexport class AWSIoTModule {}\n"]}