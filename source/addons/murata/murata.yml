AWSTemplateFormatVersion: '2010-09-09'
Description: 'Murata Vibration Sensor Network - Sputnik setup v1.0'
Parameters:
    addonSourceBucket:
        Type: String
        Description: sputnik S3 bucket.
    addonSourceKeyPrefix:
        Type: String
        Description: sputnik Source key prefix.
    dataStoreTable:
        Type: String
        Description: DynamoDB Table for storing data
    deviceBlueprintsTable:
        Type: String
        Description: DynamoDB Table for storing the device blueprints
    deviceTypesTable:
        Type: String
        Description: DynamoDB Table for storing the device types
    settingsTable:
        Type: String
        Description: DynamoDB Table for storing the settings
    solutionBlueprintsTable:
        Type: String
        Description: DynamoDB Table for storing the solution blueprints
    lambdaServiceDevicesArn:
        Type: String
        Description: Lambda Service Devices ARN
    dataS3Bucket:
        Type: String
        Description: sputnik Data S3 Bucket
    dataS3BucketArn:
        Type: String
        Description: sputnik Data S3 Bucket ARN
    customResourceUtilsHelperArn:
        Type: String
        Description: Utils custom resource helper ARN
    iamRoleForGreengrassGroups:
        Type: String
        Description: Greengrass Group Role
    uuid:
        Type: String
        Description: UUID of the deployment

Mappings:
    SourceCode:
        General:
            LogPrefix: murata-logs/
    Defaults:
        Retention:
            Days: 14

Resources:

    MurataGreengrassGroupPolicy:
        Type: 'AWS::IAM::ManagedPolicy'
        Properties:
            Description: 'Policy for the sputnik Greengrass Role.'
            PolicyDocument:
                Version: '2012-10-17'
                Statement:
                    -
                        Effect: 'Allow'
                        Action:
                            - 'logs:CreateLogStream'
                            - 'logs:DescribeLogStreams'
                            - 'logs:PutLogEvents'
                            - 'logs:CreateLogGroup'
                        Resource: 'arn:aws:logs:*:*:log-group:/aws/greengrass/*'
            Roles:
                -
                    !Ref iamRoleForGreengrassGroups

    MurataDeviceTypes:
        Type: 'Custom::LoadLambda'
        Properties:
            ServiceToken: !Ref customResourceUtilsHelperArn
            Region: !Ref 'AWS::Region'
            sourceS3Bucket: !Ref addonSourceBucket
            sourceS3Key: !Join ['/', [!Ref addonSourceKeyPrefix, 'murata', 'device-types']]
            table: !Ref deviceTypesTable
            customAction: 'dynamodbPutObjectsFromS3Folder'
            uuid: !Ref uuid
    MurataDeviceBlueprints:
        Type: 'Custom::LoadLambda'
        Properties:
            ServiceToken: !Ref customResourceUtilsHelperArn
            Region: !Ref 'AWS::Region'
            sourceS3Bucket: !Ref addonSourceBucket
            sourceS3Key: !Join ['/', [!Ref addonSourceKeyPrefix, 'murata', 'device-blueprints']]
            table: !Ref deviceBlueprintsTable
            customAction: 'dynamodbPutObjectsFromS3Folder'
            uuid: !Ref uuid

    #####################################################
    # Greengrass Lambda
    #####################################################

    MurataGreengrassLambdaRole:
        Type: 'AWS::IAM::Role'
        Properties:
            AssumeRolePolicyDocument:
                Version: '2012-10-17'
                Statement:
                    - Effect: 'Allow'
                      Principal:
                          Service:
                              - 'lambda.amazonaws.com'
                      Action:
                          - 'sts:AssumeRole'
            Path: '/'

    MurataVibrationSensorGatewayMainLambda:
        Type: 'AWS::Lambda::Function'
        Properties:
            FunctionName: 'murata-vibration-sensor-gateway-main-lambda-python'
            Description: 'Murata Vibration Sensor Gateway Main Lambda Code'
            Code:
                S3Bucket: !Ref addonSourceBucket
                S3Key: !Join ['/', [!Ref addonSourceKeyPrefix, 'murata', 'lambdas', 'murata-vibration-sensor-gateway-main-lambda-python.zip']]
            Handler: lambda_function.lambda_handler
            Runtime: python2.7
            Role: !GetAtt MurataGreengrassLambdaRole.Arn
            Timeout: 3
            MemorySize: 128
    MurataVibrationSensorGatewayMainLambdaVersion:
        Type: 'AWS::Lambda::Version'
        Properties:
            FunctionName:
                Ref: 'MurataVibrationSensorGatewayMainLambda'
            Description: 'A first version of murata-vibration-sensor-gateway-main-lambda-python'
    MurataVibrationSensorGatewayMainLambdaAlias:
        Type: 'AWS::Lambda::Alias'
        Properties:
            FunctionName: !Ref MurataVibrationSensorGatewayMainLambda
            FunctionVersion: !GetAtt MurataVibrationSensorGatewayMainLambdaVersion.Version
            Name: 'Prod'

    #####################################################
    # IoT Rules
    #####################################################

    MurataErrorTopicRuleRole:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    -
                        Effect: "Allow"
                        Principal:
                            Service:
                                - "iot.amazonaws.com"
                        Action:
                            - "sts:AssumeRole"
            Path: "/"
            Policies:
                -
                    PolicyName: 'murata-errors-republish-policy'
                    PolicyDocument:
                        Version: "2012-10-17"
                        Statement:
                            -
                                Effect: "Allow"
                                Action: "iot:Publish"
                                Resource: !Join [ "", [ "arn:aws:iot:", !Ref "AWS::Region", ":", !Ref "AWS::AccountId", ":topic/murata/*/errors" ] ]

    # IoT Rules - Add device on presence
    MurataThingAutoRegistrationTopicRuleLambdaInvocationPermission:
        Type: AWS::Lambda::Permission
        Properties:
            SourceArn: !Join [ "", [ "arn:aws:iot:", !Ref "AWS::Region", ":", !Ref "AWS::AccountId", ":rule/", !Ref "MurataThingAutoRegistrationTopicRule" ] ]
            Action: lambda:InvokeFunction
            Principal: iot.amazonaws.com
            FunctionName: !Ref lambdaServiceDevicesArn
            SourceAccount: !Ref AWS::AccountId
    MurataThingAutoRegistrationTopicRule:
        Type: "AWS::IoT::TopicRule"
        Properties:
            TopicRulePayload:
                RuleDisabled: false
                Sql: !Join [ "", [
                        "SELECT ",
                        !Join [ ", ", [
                            "concat('MURATA_', topic(3)) as thingName",
                            "'addDevice' as cmd",
                            "false as generateCert",
                            "'murata-sensor-node-v1.0' as deviceTypeId",
                            "'murata-vibration-sensor-node-v1.0' as deviceBlueprintId"
                        ]],
                        " FROM 'murata/+/+/presence'"
                    ] ]
                Actions:
                    - Lambda:
                        FunctionArn: !Ref lambdaServiceDevicesArn
                ErrorAction:
                    Republish:
                        RoleArn: !GetAtt MurataErrorTopicRuleRole.Arn
                        Topic: "murata/MURATA_${topic(3)}/errors"

    # IoT Rules - Live data to shadow
    MurataThingSensorDataToShadowTopicRuleRole:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    -
                        Effect: "Allow"
                        Principal:
                            Service:
                                - "iot.amazonaws.com"
                        Action:
                            - "sts:AssumeRole"
            Path: "/"
            Policies:
                -
                    PolicyName: 'murata-sensor-node-republish-to-shadow-policy'
                    PolicyDocument:
                        Version: "2012-10-17"
                        Statement:
                            -
                                Effect: "Allow"
                                Action: "iot:Publish"
                                Resource: !Join [ "", [ "arn:aws:iot:", !Ref "AWS::Region", ":", !Ref "AWS::AccountId", ":topic/$aws/things/*/shadow/update" ] ]
    MurataThingSensorDataToShadowTopicRule:
        Type: "AWS::IoT::TopicRule"
        Properties:
            TopicRulePayload:
                RuleDisabled: false
                Sql: SELECT * as state.reported FROM 'murata/+/+/data'
                AwsIotSqlVersion: '2016-03-23'
                Actions:
                    - Republish:
                        RoleArn: !GetAtt MurataThingSensorDataToShadowTopicRuleRole.Arn
                        Topic: "$$aws/things/MURATA_${topic(3)}/shadow/update"
                ErrorAction:
                    Republish:
                        RoleArn: !GetAtt MurataErrorTopicRuleRole.Arn
                        Topic: "murata/MURATA_${topic(3)}/errors"

    # IoT Rules - Live data to dynamoDB
    MurataDataStoreTopicRuleRole:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    -
                        Effect: "Allow"
                        Principal:
                            Service:
                                - "iot.amazonaws.com"
                        Action:
                            - "sts:AssumeRole"
            Path: "/"
            Policies:
                -
                    PolicyName: 'murata-sensor-node-data-to-data-store-policy'
                    PolicyDocument:
                        Version: "2012-10-17"
                        Statement:
                            -
                                Effect: 'Allow'
                                Action:
                                    - 'dynamodb:BatchWriteItem'
                                    - 'dynamodb:PutItem'
                                    - 'dynamodb:UpdateItem'
                                Resource:
                                    - !Join ['', ['arn:aws:dynamodb:', !Ref 'AWS::Region', ':', !Ref 'AWS::AccountId', ':table/', !Ref dataStoreTable]]
    MurataDataStoreTopicRule:
        Type: "AWS::IoT::TopicRule"
        Properties:
            TopicRulePayload:
                RuleDisabled: false
                Sql: SELECT concat('MURATA_', topic(3), '-graphdata') as ThingNameAndMetric, (cast((timestamp / 1000) as Integer) + 172800) as ExpirationTime, timestamp as Timestamp, * as Data FROM 'murata/+/+/data'
                AwsIotSqlVersion: '2016-03-23'
                Actions:
                    - DynamoDBv2:
                        RoleArn: !GetAtt MurataDataStoreTopicRuleRole.Arn
                        PutItem:
                            TableName: !Ref dataStoreTable
                ErrorAction:
                    Republish:
                        RoleArn: !GetAtt MurataErrorTopicRuleRole.Arn
                        Topic: "murata/MURATA_${topic(3)}/errors"


    # IoT Rules - Thresholds management
    MurataThresholdsSNSTopic:
        Type: 'AWS::SNS::Topic'
        Properties:
            Subscription:
                -
                    Endpoint: !GetAtt MurataThresholdsQueue.Arn
                    Protocol: 'sqs'
    MurataThresholdsQueue:
        Type: 'AWS::SQS::Queue'
    MurataThresholdsQueuePolicy:
        Type: 'AWS::SQS::QueuePolicy'
        Properties:
            PolicyDocument:
                Version: '2012-10-17'
                Statement:
                    -
                        Sid: "Allow-SendMessage-To-Queue-From-SNS-Topic"
                        Effect: "Allow"
                        Principal: "*"
                        Action:
                            - "sqs:SendMessage"
                        Resource: "*"
                        Condition:
                            ArnEquals:
                                "aws:SourceArn": !Ref MurataThresholdsSNSTopic
            Queues:
                - !Ref MurataThresholdsQueue
    MurataThresholdsManagementTopicRuleRole:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Version: '2012-10-17'
                Statement:
                    -
                        Effect: 'Allow'
                        Principal:
                            Service:
                                - 'iot.amazonaws.com'
                        Action:
                            - 'sts:AssumeRole'
            Path: '/'
    MurataIoTGetThingShadowIAMPolicy:
        Type: 'AWS::IAM::ManagedPolicy'
        Properties:
            Description: 'Murata policy for getthingshadow.'
            PolicyDocument:
                Version: '2012-10-17'
                Statement:
                    -
                        Effect: 'Allow'
                        Action:
                            - 'iot:GetThingShadow'
                        Resource:
                            - '*'
                    -
                        Effect: 'Allow'
                        Action:
                            - 'sns:Publish'
                        Resource:
                            - !Ref MurataThresholdsSNSTopic
            Roles:
                - !Ref 'MurataThresholdsManagementTopicRuleRole'
    MurataIoTRepublishIAMPolicy:
        Type: 'AWS::IAM::ManagedPolicy'
        Properties:
            Description: 'Murata republish to murata topics policy'
            PolicyDocument:
                Version: "2012-10-17"
                Statement:
                    -
                        Effect: "Allow"
                        Action: "iot:Publish"
                        Resource: !Join [ "", [ "arn:aws:iot:", !Ref "AWS::Region", ":", !Ref "AWS::AccountId", ":topic/murata/*" ] ]
            Roles:
                - !Ref 'MurataThresholdsManagementTopicRuleRole'

    MurataThresholdsRepublishTopicRule:
        Type: 'AWS::IoT::TopicRule'
        Properties:
            TopicRulePayload:
                RuleDisabled: false
                Sql: !Join [ "", [
                        "SELECT * as data, get_thing_shadow(concat('MURATA_', topic(3)), '",
                        !GetAtt MurataThresholdsManagementTopicRuleRole.Arn,
                        "').state.desired.thresholds as thresholds FROM 'murata/+/+/data'"
                    ] ]
                AwsIotSqlVersion: '2016-03-23'
                Actions:
                    - Republish:
                        RoleArn: !GetAtt MurataThresholdsManagementTopicRuleRole.Arn
                        Topic: "murata/${topic(2)}/${topic(3)}/thresholdCheck"
                ErrorAction:
                    Republish:
                        RoleArn: !GetAtt MurataErrorTopicRuleRole.Arn
                        Topic: "murata/MURATA_${topic(3)}/errors"
    MurataThresholdsCalculateTopicRule:
        Type: 'AWS::IoT::TopicRule'
        Properties:
            TopicRulePayload:
                RuleDisabled: false
                Sql: !Join [ "", [
                        "SELECT topic(2) as gateway, topic(3) as thingname, * FROM 'murata/+/+/thresholdCheck' WHERE ",
                        !Join [ " OR ", [
                            "data.batteryVoltage < thresholds.batteryVoltageLow",
                            "data.surfaceTemperature > thresholds.surfaceTemperatureHigh",
                            "data.surfaceTemperature < thresholds.surfaceTemperatureLow",
                            "data.kurtosis > thresholds.kurtosisHigh",
                            "data.kurtosis < thresholds.kurtosisLow",
                            "data.rms > thresholds.rmsHigh",
                            "data.rms < thresholds.rmsLow",
                        ]]
                    ] ]
                AwsIotSqlVersion: '2016-03-23'
                Actions:
                    - Sns:
                        RoleArn: !GetAtt MurataThresholdsManagementTopicRuleRole.Arn
                        TargetArn: !Ref MurataThresholdsSNSTopic
                ErrorAction:
                    Republish:
                        RoleArn: !GetAtt MurataErrorTopicRuleRole.Arn
                        Topic: "murata/MURATA_${topic(3)}/errors"

    #####################################################
    # Firehose to S3
    #####################################################

    MurataFirehoseIoTTopicRuleRole:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Version: '2012-10-17'
                Statement:
                    -
                        Effect: Allow
                        Principal:
                            Service:
                                - 'iot.amazonaws.com'
                        Action:
                            - 'sts:AssumeRole'
            Path: /
            Policies:
                -
                    # Posts to MurataRawDataDeliveryStream
                    PolicyName: 'iotMurataFirehoseIoTTopicRulePolicy'
                    PolicyDocument:
                        Version: '2012-10-17'
                        Statement:
                            -
                                Effect: 'Allow'
                                Action:
                                    - firehose:DescribeDeliveryStream
                                    - firehose:ListDeliveryStreams
                                    - firehose:PutRecord
                                    - firehose:PutRecordBatch
                                Resource: !GetAtt MurataRawDataFirehoseDeliveryStream.Arn
    MurataFirehoseIoTTopicRule:
        Type: AWS::IoT::TopicRule
        Properties:
            TopicRulePayload:
                RuleDisabled: false
                Description: 'Send IoT Device data in raw format to Kinesis'
                AwsIotSqlVersion: '2016-03-23'
                Sql: !Sub 'SELECT *, parse_time("yyyy-MM-dd HH:mm:ss", timestamp()) as ts FROM "murata/+/+/data"'
                Actions:
                    -
                        Firehose:
                            DeliveryStreamName: !Ref MurataRawDataFirehoseDeliveryStream
                            RoleArn: !GetAtt MurataFirehoseIoTTopicRuleRole.Arn
                            Separator: "\n"

    MurataIoTDataLogGroup:
        Type: AWS::Logs::LogGroup
        Properties:
            RetentionInDays: !FindInMap ['Defaults', 'Retention', 'Days']
    MurataRawDataFirehoseDeliveryStreamRole:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Version: '2012-10-17'
                Statement:
                    -
                        Effect: Allow
                        Principal:
                            Service:
                                - 'firehose.amazonaws.com'
                        Action:
                            - 'sts:AssumeRole'
            Path: /
            Policies:
                -
                    # Puts objects in MurataRawDataBucket
                    PolicyName: 'MurataRawDataS3UploadPolicy'
                    PolicyDocument:
                        Version: '2012-10-17'
                        Statement:
                            -
                                Effect: Allow
                                Action:
                                    - s3:AbortMultipartUpload
                                    - s3:GetBucketLocation
                                    - s3:GetObject
                                    - s3:PutObject
                                    - s3:ListBucket
                                    - s3:ListBucketMultipartUploads
                                Resource:
                                    - !Sub '${MurataRawDataBucket.Arn}'
                                    - !Sub '${MurataRawDataBucket.Arn}/'
                                    - !Sub '${MurataRawDataBucket.Arn}/*'

                -
                    # Write to CloudWatch
                    PolicyName: MurataRawDataDeliveryStreamLogging
                    PolicyDocument:
                        Version: '2012-10-17'
                        Statement:
                            -
                                Effect: Allow
                                Action:
                                    - logs:CreateLogGroup
                                    - logs:CreateLogStream
                                    - logs:PutDestination
                                    - logs:PutLogEvents
                                Resource:
                                    !Join ['', ['arn:aws:logs:', !Ref 'AWS::Region', ':', !Ref 'AWS::AccountId', ':log-group:*']]
    MurataRawDataFirehoseDeliveryStream:
        Type: AWS::KinesisFirehose::DeliveryStream
        Properties:
            S3DestinationConfiguration:
                BucketARN: !GetAtt MurataRawDataBucket.Arn
                BufferingHints:
                    IntervalInSeconds: 60
                    SizeInMBs: 10
                CloudWatchLoggingOptions:
                    Enabled: true
                    LogGroupName: !Ref MurataIoTDataLogGroup
                    LogStreamName: 'MurataRawDataS3Delivery'
                CompressionFormat: 'UNCOMPRESSED'
                EncryptionConfiguration:
                    NoEncryptionConfig: 'NoEncryption'
                Prefix: !FindInMap ['SourceCode', 'General', 'LogPrefix']
                RoleARN: !GetAtt MurataRawDataFirehoseDeliveryStreamRole.Arn

    MurataRawDataBucket:
        DeletionPolicy: Retain
        Type: AWS::S3::Bucket
        Properties:
            LifecycleConfiguration:
                Rules:
                    -
                        Id: ExpirationRule
                        Status: Enabled
                        ExpirationInDays: !FindInMap ['Defaults', 'Retention', 'Days']
