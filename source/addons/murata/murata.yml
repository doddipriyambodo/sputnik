AWSTemplateFormatVersion: '2010-09-09'
Description: 'Murata Vibration Sensor Network - Sputnik setup v1.0'
Parameters:
    addonSourceBucket:
        Type: String
        Description: sputnik S3 bucket.
    addonSourceKeyPrefix:
        Type: String
        Description: sputnik Source key prefix.
    deviceBlueprintsTable:
        Type: String
        Description: DynamoDB Table for storing the device blueprints
    deviceTypesTable:
        Type: String
        Description: DynamoDB Table for storing the device types
    settingsTable:
        Type: String
        Description: DynamoDB Table for storing the settings
    solutionBlueprintsTable:
        Type: String
        Description: DynamoDB Table for storing the solution blueprints
    lambdaServiceDevicesArn:
        Type: String
        Description: Lambda Service Devices ARN
    dataS3Bucket:
        Type: String
        Description: sputnik Data S3 Bucket
    dataS3BucketArn:
        Type: String
        Description: sputnik Data S3 Bucket ARN
    customResourceUtilsHelperArn:
        Type: String
        Description: Utils custom resource helper ARN
    iamRoleForGreengrassGroups:
        Type: String
        Description: Greengrass Group Role
    uuid:
        Type: String
        Description: UUID of the deployment

Mappings:
    SourceCode:
        General:
            LogPrefix: murata-logs/
    Defaults:
        Retention:
            Days: 14

Resources:

    MurataGreengrassGroupPolicy:
        Type: 'AWS::IAM::ManagedPolicy'
        Properties:
            Description: 'Policy for the sputnik Greengrass Role.'
            PolicyDocument:
                Version: '2012-10-17'
                Statement:
                    -
                        Effect: 'Allow'
                        Action:
                            - 'logs:CreateLogStream'
                            - 'logs:DescribeLogStreams'
                            - 'logs:PutLogEvents'
                            - 'logs:CreateLogGroup'
                        Resource: 'arn:aws:logs:*:*:log-group:/aws/greengrass/*'
            Roles:
                -
                    !Ref iamRoleForGreengrassGroups

    MurataDeviceTypes:
        Type: 'Custom::LoadLambda'
        Properties:
            ServiceToken: !Ref customResourceUtilsHelperArn
            Region: !Ref 'AWS::Region'
            sourceS3Bucket: !Ref addonSourceBucket
            sourceS3Key: !Join ['/', [!Ref addonSourceKeyPrefix, 'murata', 'device-types']]
            table: !Ref deviceTypesTable
            customAction: 'dynamodbPutObjectsFromS3Folder'
            uuid: !Ref uuid

    MurataDeviceBlueprints:
        Type: 'Custom::LoadLambda'
        Properties:
            ServiceToken: !Ref customResourceUtilsHelperArn
            Region: !Ref 'AWS::Region'
            sourceS3Bucket: !Ref addonSourceBucket
            sourceS3Key: !Join ['/', [!Ref addonSourceKeyPrefix, 'murata', 'device-blueprints']]
            table: !Ref deviceBlueprintsTable
            customAction: 'dynamodbPutObjectsFromS3Folder'
            uuid: !Ref uuid

    MurataGreengrassLambdaRole:
        Type: 'AWS::IAM::Role'
        Properties:
            AssumeRolePolicyDocument:
                Version: '2012-10-17'
                Statement:
                    - Effect: 'Allow'
                      Principal:
                          Service:
                              - 'lambda.amazonaws.com'
                      Action:
                          - 'sts:AssumeRole'
            Path: '/'

    MurataVibrationSensorGatewayMainLambda:
        Type: 'AWS::Lambda::Function'
        Properties:
            FunctionName: 'murata-vibration-sensor-gateway-main-lambda-python'
            Description: 'Murata Vibration Sensor Gateway Main Lambda Code'
            Code:
                S3Bucket: !Ref addonSourceBucket
                S3Key: !Join ['/', [!Ref addonSourceKeyPrefix, 'murata', 'lambdas', 'murata-vibration-sensor-gateway-main-lambda-python.zip']]
            Handler: lambda_function.lambda_handler
            Runtime: python2.7
            Role: !GetAtt MurataGreengrassLambdaRole.Arn
            Timeout: 3
            MemorySize: 128
    MurataVibrationSensorGatewayMainLambdaVersion:
        Type: 'AWS::Lambda::Version'
        Properties:
            FunctionName:
                Ref: 'MurataVibrationSensorGatewayMainLambda'
            Description: 'A first version of murata-vibration-sensor-gateway-main-lambda-python'
    MurataVibrationSensorGatewayMainLambdaAlias:
        Type: 'AWS::Lambda::Alias'
        Properties:
            FunctionName: !Ref MurataVibrationSensorGatewayMainLambda
            FunctionVersion: !GetAtt MurataVibrationSensorGatewayMainLambdaVersion.Version
            Name: 'Prod'

    iotMurataThingAutoRegistrationTopicRule:
        Type: "AWS::IoT::TopicRule"
        Properties:
            TopicRulePayload:
                RuleDisabled: false
                Sql: >-
                    SELECT * FROM 'murata/+/presence/+'
                Actions:
                    - Lambda:
                        FunctionArn: !Ref lambdaServiceDevicesArn

    iotMurataThingAutoRegistrationTopicRuleLambdaInvocationPermission:
        Type: AWS::Lambda::Permission
        Properties:
            SourceArn: !Join [ "", [ "arn:aws:iot:", !Ref "AWS::Region", ":", !Ref "AWS::AccountId", ":rule/", !Ref "iotMurataThingAutoRegistrationTopicRule" ] ]
            Action: lambda:InvokeFunction
            Principal: iot.amazonaws.com
            FunctionName: !Ref lambdaServiceDevicesArn
            SourceAccount: !Ref AWS::AccountId

    iotMurataThingSensorDataToShadowTopicRuleRole:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    -
                        Effect: "Allow"
                        Principal:
                            Service:
                                - "iot.amazonaws.com"
                        Action:
                            - "sts:AssumeRole"
            Path: "/"
            Policies:
                -
                    PolicyName: 'murata-sensor-node-republish-to-shadow-policy'
                    PolicyDocument:
                        Version: "2012-10-17"
                        Statement:
                            -
                                Effect: "Allow"
                                Action: "iot:Publish"
                                Resource: !Join [ "", [ "arn:aws:iot:", !Ref "AWS::Region", ":", !Ref "AWS::AccountId", ":topic/$aws/things/*/shadow/update" ] ]

    iotMurataThingSensorDataToShadowTopicRule:
        Type: "AWS::IoT::TopicRule"
        Properties:
            TopicRulePayload:
                RuleDisabled: false
                Sql: SELECT * as state.reported FROM 'murata/+/+/data'
                AwsIotSqlVersion: '2016-03-23'
                Actions:
                    - Republish:
                        RoleArn: !GetAtt iotMurataThingSensorDataToShadowTopicRuleRole.Arn
                        Topic: "$$aws/things/MURATA_${topic(3)}/shadow/update"


    iotMurataFirehoseIoTTopicRuleRole:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Version: '2012-10-17'
                Statement:
                    -
                        Effect: Allow
                        Principal:
                            Service:
                                - 'iot.amazonaws.com'
                        Action:
                            - 'sts:AssumeRole'
            Path: /
            Policies:
                -
                    # Posts to MurataRawDataDeliveryStream
                    PolicyName: 'iotMurataFirehoseIoTTopicRulePolicy'
                    PolicyDocument:
                        Version: '2012-10-17'
                        Statement:
                            -
                                Effect: 'Allow'
                                Action:
                                    - firehose:DescribeDeliveryStream
                                    - firehose:ListDeliveryStreams
                                    - firehose:PutRecord
                                    - firehose:PutRecordBatch
                                Resource: !Sub '${MurataRawDataDeliveryStream.Arn}'

    iotMurataFirehoseTopicRule:
        Type: AWS::IoT::TopicRule
        Properties:
            TopicRulePayload:
                RuleDisabled: false
                Description: 'Send IoT Device data in raw format to Kinesis'
                AwsIotSqlVersion: '2016-03-23'
                Sql: !Sub 'SELECT *, parse_time("yyyy-MM-dd HH:mm:ss", timestamp()) as ts FROM "murata/+/+/data"'
                Actions:
                    - Firehose:
                        DeliveryStreamName: !Ref MurataRawDataDeliveryStream
                        RoleArn: !Sub '${iotMurataFirehoseIoTTopicRuleRole.Arn}'
                        Separator: "\n"


    MurataIoTDataLogGroup:
        Type: AWS::Logs::LogGroup
        Properties:
            RetentionInDays: !FindInMap ['Defaults', 'Retention', 'Days']

    MurataRawDataDeliveryStream:
        Type: AWS::KinesisFirehose::DeliveryStream
        Properties:
            S3DestinationConfiguration:
                BucketARN: !GetAtt MurataRawDataBucket.Arn
                BufferingHints:
                    IntervalInSeconds: 60
                    SizeInMBs: 10
                CloudWatchLoggingOptions:
                    Enabled: true
                    LogGroupName: !Ref MurataIoTDataLogGroup
                    LogStreamName: 'MurataRawDataS3Delivery'
                CompressionFormat: 'UNCOMPRESSED'
                EncryptionConfiguration:
                    NoEncryptionConfig: 'NoEncryption'
                Prefix: !FindInMap ['SourceCode', 'General', 'LogPrefix']
                RoleARN: !GetAtt MurataRawDataDeliveryStreamRole.Arn

    MurataRawDataBucket:
        DeletionPolicy: Retain
        Type: AWS::S3::Bucket
        Properties:
            LifecycleConfiguration:
                Rules:
                    -
                        Id: ExpirationRule
                        Status: Enabled
                        ExpirationInDays: !FindInMap ['Defaults', 'Retention', 'Days']

    MurataRawDataDeliveryStreamRole:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Version: '2012-10-17'
                Statement:
                    -
                        Effect: Allow
                        Principal:
                            Service:
                                - 'firehose.amazonaws.com'
                        Action:
                            - 'sts:AssumeRole'
            Path: /
            Policies:
                -
                    # Puts objects in MurataRawDataBucket
                    PolicyName: 'MurataRawDataS3UploadPolicy'
                    PolicyDocument:
                        Version: '2012-10-17'
                        Statement:
                            -
                                Effect: Allow
                                Action:
                                    - s3:AbortMultipartUpload
                                    - s3:GetBucketLocation
                                    - s3:GetObject
                                    - s3:PutObject
                                    - s3:ListBucket
                                    - s3:ListBucketMultipartUploads
                                Resource:
                                    - !Sub '${MurataRawDataBucket.Arn}'
                                    - !Sub '${MurataRawDataBucket.Arn}/'
                                    - !Sub '${MurataRawDataBucket.Arn}/*'

                -
                    # Write to CloudWatch
                    PolicyName: MurataRawDataDeliveryStreamLogging
                    PolicyDocument:
                        Version: '2012-10-17'
                        Statement:
                            -
                                Effect: Allow
                                Action:
                                    - logs:CreateLogGroup
                                    - logs:CreateLogStream
                                    - logs:PutDestination
                                    - logs:PutLogEvents
                                Resource:
                                    !Join ['', ['arn:aws:logs:', !Ref 'AWS::Region', ':', !Ref 'AWS::AccountId', ':log-group:*']]
